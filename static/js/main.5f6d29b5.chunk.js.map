{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","calcStr","makeCalcStr","calc","_this","calculteIt","deleteIt","clearIt","setState","slice","result","eval","err","console","log","toString","react__WEBPACK_IMPORTED_MODULE_5___default","className","KeyBox","num","this","id","React","Component","props","map","buttonVal","name","onClick","event","target"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,qtCEhIbR,wuBACJS,MAAQ,CACNC,QAAS,UAGXC,YAAc,SAACC,GACb,OAAQA,GACN,IAAK,IAAOC,MAAKC,aAAc,MAC/B,IAAK,MAAOD,MAAKE,WAAY,MAC7B,IAAK,MAAOF,MAAKG,UAAW,MAC5B,IAAK,IAAiC,IAAtBH,MAAKJ,MAAMC,UAAeE,EAAK,IAAK,MACpD,QAAsC,OAAtBC,MAAKJ,MAAMC,UAAkBG,MAAKJ,MAAMC,QAAU,IACtDG,MAAKI,SAAS,CAACP,QAASG,MAAKJ,MAAMC,QAAQE,YAG3DG,SAAW,WACTF,MAAKI,SAAS,CAACP,QAAS,YAE1BM,QAAU,WAERH,MAAKI,SAAS,CAACP,QAASG,MAAKJ,MAAMC,QAAQQ,MAAM,GAAI,YAEvDJ,WAAa,WACX,IAAIK,OAAS,GACb,IAAKA,OAASC,KAAKP,MAAKJ,MAAMC,SAAW,IACzC,MAAOW,KAAOC,QAAQC,IAAI,SAAUJ,OAAS,MAC7CN,MAAKI,SAAS,CAACP,QAASS,OAAOK,wXAS/B,OACIC,2CAAA3B,EAAAC,cAAA,OAAK2B,UAAU,iBACTD,2CAAA3B,EAAAC,cAAC4B,OAAD,CAAQC,IAPE,CAAC,IAAK,IAAK,IAAK,IACpB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,MAAO,MAAO,KAGChB,KAAMiB,KAAKlB,cACvCc,2CAAA3B,EAAAC,cAAA,OAAK+B,GAAG,aAAaD,KAAKpB,MAAMC,mBAtC1BqB,6CAAMC,WA4ClBL,OAAS,SAAAM,GAAK,OAClBR,2CAAA3B,EAAAC,cAAA,OAAK2B,UAAY,aAEfO,EAAML,IAAIM,IAAI,SAAAC,GACZ,OAAOV,2CAAA3B,EAAAC,cAAA,UAAQqC,KAAMD,EAAWE,QAAS,SAAAC,GAAK,OAAIL,EAAMrB,KAAK0B,EAAMC,OAAOH,QAAQD,OAQzEnC","file":"static/js/main.5f6d29b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    calcStr: \"\"   //need it to be string not mixing types\n  };\n  \n  makeCalcStr = (calc) => {\n    switch (calc) {\n      case \"=\":   this.calculteIt(); break\n      case \"DEL\": this.deleteIt(); break\n      case \"CLR\": this.clearIt(); break\n      case \"0\":   if (this.state.calcStr == \"\"){calc=\"\"}; break //clear leading 0\n      default:    if (this.state.calcStr == \"ERR\"){this.state.calcStr = \"\"} //setState doesnt wirk so fudge it!\n                  this.setState({calcStr: this.state.calcStr+calc})\n    }//end switch\n  } //end makeCalcStr\n  deleteIt = () => {\n    this.setState({calcStr: \"\"})\n  }\n  clearIt = () => {\n    /*remove last key entered*/\n    this.setState({calcStr: this.state.calcStr.slice(0, -1)})\n  }\n  calculteIt = () => {\n    let result = \"\"\n    try {result = eval(this.state.calcStr || \"\")}\n    catch (err) { console.log('error'); result = \"ERR\"}\n    this.setState({calcStr: result.toString()})\n  }\n  \n  render() {\n    const buttonArray = [\"(\", \")\", \".\", \"/\",\n                    \"7\", \"8\", \"9\", \"*\",\n                    \"4\", \"5\", \"6\", \"+\",\n                    \"1\", \"2\", \"3\", \"-\",\n                    \"0\", \"DEL\", \"CLR\", \"=\"]\n    return (\n        <div className=\"calculatorBox\">\n              <KeyBox num={buttonArray} calc={this.makeCalcStr}/>\n            <div id=\"outputBox\">{this.state.calcStr}</div>\n        </div>\n    );\n  }\n}\n\nconst KeyBox = props => (\n  <div className = \"numberBox\">\n  {\n    props.num.map(buttonVal => {\n      return <button name={buttonVal} onClick={event => props.calc(event.target.name)}>{buttonVal}</button>\n    })\n  }\n\n  </div>\n)\n\n\nexport default App;\n"],"sourceRoot":""}